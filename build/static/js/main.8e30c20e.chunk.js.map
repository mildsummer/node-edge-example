{"version":3,"sources":["components/Node.js","components/Path.js","components/Edge.js","components/Graph.js","App.js","serviceWorker.js","index.js"],"names":["options","recognizers","pan","threshold","Node","position","onChangePosition","useState","panStartX","panStartY","setPanStartPosition","x","y","onPanStart","onPan","e","deltaX","deltaY","onPanEnd","className","style","top","left","floor","Math","Path","position1","position2","handleLength","linear","middle","handle1","d","stroke","strokeWidth","fill","abs","min","max","Edge","node1","node2","edgePosition","node","positionIndex","pIndex","NODE_SIZE","leftTop","rightBottom","width","height","PADDING","padding","boxSizing","Graph","nodes","setNodes","map","index","key","newNodes","concat","handleChange","index1","index2","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8e30c20e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Hammer from \"react-hammerjs\";\nimport './Node.sass';\n\nconst options = {\n  recognizers: {\n    pan: {\n      threshold: 1\n    }\n  }\n};\n\nfunction Node({ position, onChangePosition }) {\n  const [[panStartX, panStartY], setPanStartPosition] = useState([]);\n  const [x, y] = position;\n  const handlePanStart = () => {\n    setPanStartPosition([x, y]);\n  };\n  const handlePan = (e) => {\n    onChangePosition([panStartX + e.deltaX, panStartY + e.deltaY]);\n  };\n  const handlePanEnd = () => {\n    setPanStartPosition([0, 0]);\n  };\n  return (\n    <Hammer options={options} onPanStart={handlePanStart} onPan={handlePan} onPanEnd={handlePanEnd}>\n      <div\n        className=\"Node\"\n        style={{\n          top: y,\n          left: x,\n        }}\n      />\n    </Hammer>\n  );\n}\n\nexport default Node;\n","import React from 'react';\nimport './Path.sass';\n\nconst { floor } = Math;\n\nfunction Path({ position1, position2, handleLength, linear }) {\n  const middle = [(position1[0] + position2[0]) / 2, (position1[1] + position2[1]) / 2];\n  middle[1] = floor((middle[1] - 50) / 100) * 100 + 50;\n  const handle1 = [middle[0] + handleLength * (position1[0] > position2[0] ? 1 : -1), middle[1]];\n  // const handle2 = [middle[0] + handleLength, middle[1]];\n  return (\n    <path\n      d={linear ? `M${position1[0]} ${position1[1]}, ${position2[0]} ${position2[1]}`\n        : `M${position1[0]} ${position1[1]} Q ${handle1[0]} ${handle1[1]}, ${middle[0]} ${middle[1]} T ${position2[0]} ${position2[1]}`}\n      stroke=\"#000\"\n      strokeWidth={2}\n      fill=\"none\"\n    />\n  );\n}\n\nexport default Path;\n","import React from 'react';\nimport './Edge.sass';\nimport Path from \"./Path\";\n\nconst { abs, min, max } = Math;\n\nconst PADDING = 100;\nconst NODE_SIZE = 100;\n\nfunction Edge({ node1, node2 }) {\n  const edgePosition = (node, positionIndex = null) => {\n    const pIndex = typeof positionIndex === \"number\" ? positionIndex : node[2];\n    if (pIndex === 0) {\n      return [node[0], node[1] - NODE_SIZE / 2];\n    } else if (pIndex === 1) {\n      return [node[0] + NODE_SIZE / 2, node[1]];\n    } else if (pIndex === 2) {\n      return [node[0], node[1] + NODE_SIZE / 2];\n    } else if (pIndex === 3) {\n      return [node[0] - NODE_SIZE / 2, node[1]];\n    }\n  };\n  const position1 = edgePosition(node1);\n  let position2 = edgePosition(node2);\n  if (position1[0] > position2[0]) {\n    position2 = edgePosition(node2, 1);\n  }\n  const linear = abs(position1[0] - position2[0]) < 100;\n  const leftTop = [min(position1[0], position2[0]), min(position1[1], position2[1])];\n  const rightBottom = [max(position1[0], position2[0]), max(position1[1], position2[1])];\n  const width = rightBottom[0] - leftTop[0];\n  const height = rightBottom[1] - leftTop[1];\n  return (\n    <div\n      className=\"Edge\"\n      style={{\n        width: width + PADDING * 2,\n        height: height + PADDING * 2,\n        top: leftTop[1] - PADDING,\n        left: leftTop[0] - PADDING,\n        padding: PADDING,\n        boxSizing: \"border-box\"\n      }}\n    >\n      <div\n        className=\"Edge-point\"\n        style={{\n          top: position1[1] - leftTop[1] + PADDING,\n          left: position1[0] - leftTop[0] + PADDING\n        }}\n      />\n      <div\n        className=\"Edge-point\"\n        style={{\n          top: position2[1] - leftTop[1] + PADDING,\n          left: position2[0] - leftTop[0] + PADDING\n        }}\n      />\n      <svg\n        className=\"Edge-svg\"\n        width={width + PADDING * 2}\n        height={height + PADDING * 2}\n      >\n        <Path\n          position1={[position1[0] - leftTop[0] + PADDING, position1[1] - leftTop[1] + PADDING]}\n          position2={[position2[0] - leftTop[0] + PADDING, position2[1] - leftTop[1] + PADDING]}\n          handleLength={width * 0.5}\n          linear={linear}\n        />\n      </svg>\n    </div>\n  );\n}\n\nexport default Edge;\n","import React, { useState } from 'react';\nimport './Graph.sass';\nimport Node from \"./Node\";\nimport Edge from \"./Edge\";\n\nfunction Graph() {\n  const [nodes, setNodes] = useState([\n    [50, 50, 1],\n    [350, 50, 3],\n  ]);\n  const edges = [[0, 1]];\n  const handleChange = (index, position) => {\n    const newNodes = nodes.concat();\n    newNodes[index][0] = position[0];\n    newNodes[index][1] = position[1];\n    setNodes(newNodes);\n  };\n  return (\n    <div className=\"Graph\">\n      {nodes.map((node, index) => (\n        <Node\n          key={index}\n          position={node}\n          onChangePosition={position => handleChange(index, position)}\n        />\n      ))}\n      {edges.map(([index1, index2]) => (\n        <Edge\n          key={`${index1}-${index2}`}\n          node1={nodes[index1]}\n          node2={nodes[index2]}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default Graph;\n","import React from 'react';\nimport './App.css';\nimport Graph from \"./components/Graph\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Graph />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}